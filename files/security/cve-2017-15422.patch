Index: trunk/icu4c/source/i18n/gregoimp.cpp
===================================================================
--- a/trunk/icu4c/source/i18n/gregoimp.cpp
+++ b/trunk/icu4c/source/i18n/gregoimp.cpp
@@ -24,4 +24,9 @@
 
 int32_t ClockMath::floorDivide(int32_t numerator, int32_t denominator) {
+    return (numerator >= 0) ?
+        numerator / denominator : ((numerator + 1) / denominator) - 1;
+}
+
+int64_t ClockMath::floorDivide(int64_t numerator, int64_t denominator) {
     return (numerator >= 0) ?
         numerator / denominator : ((numerator + 1) / denominator) - 1;
---

Index: trunk/icu4c/source/i18n/gregoimp.h
===================================================================
--- a/trunk/icu4c/source/i18n/gregoimp.h
+++ b/trunk/icu4c/source/i18n/gregoimp.h
@@ -40,4 +40,15 @@
      */
     static int32_t floorDivide(int32_t numerator, int32_t denominator);
+
+    /**
+     * Divide two integers, returning the floor of the quotient.
+     * Unlike the built-in division, this is mathematically
+     * well-behaved.  E.g., <code>-1/4</code> => 0 but
+     * <code>floorDivide(-1,4)</code> => -1.
+     * @param numerator the numerator
+     * @param denominator a divisor which must be != 0
+     * @return the floor of the quotient
+     */
+    static int64_t floorDivide(int64_t numerator, int64_t denominator);
 
     /**
---

Index: trunk/icu4c/source/i18n/persncal.cpp
===================================================================
--- a/trunk/icu4c/source/i18n/persncal.cpp
+++ b/trunk/icu4c/source/i18n/persncal.cpp
@@ -214,5 +214,5 @@
 
     int32_t daysSinceEpoch = julianDay - PERSIAN_EPOCH;
-    year = 1 + ClockMath::floorDivide(33 * daysSinceEpoch + 3, 12053);
+    year = 1 + (int32_t)ClockMath::floorDivide(33 * (int64_t)daysSinceEpoch + 3, (int64_t)12053);
 
     int32_t farvardin1 = 365 * (year - 1) + ClockMath::floorDivide(8 * year + 21, 33);
---
